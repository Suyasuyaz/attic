name: Close Parent Issue When All Child Issues Are Closed

on:
  issues:
    types: [closed]
  workflow_dispatch:

jobs:
  check-and-close-parent-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Close Parent Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.payload.issue ? context.payload.issue.number : null;
            
            // ワークフローが手動実行された場合はすべての親Issueをチェック
            if (!issueNumber) {
              console.log('Workflow triggered manually. Checking all possible parent issues...');
              await checkAllParentIssues();
            } else {
              console.log(`Issue #${issueNumber} was closed. Checking for parent issues...`);
              await findAndCheckParentIssues(issueNumber);
            }
            
            // 閉じられたIssueの親Issueを探して処理する関数
            async function findAndCheckParentIssues(childIssueNumber) {
              // GitHub Issueの本文やコメントから親Issueへの参照を検索
              const childIssue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: childIssueNumber
              });
              
              // 親Issueへの参照を検索（"parent of #xx" 形式や "closes #xx" 形式など）
              const bodyText = childIssue.data.body || '';
              const parentMatches = bodyText.match(/(?:part of|parent:|related to) #(\d+)/gi);
              
              if (parentMatches) {
                for (const match of parentMatches) {
                  const parentIssueNumber = parseInt(match.match(/#(\d+)/)[1]);
                  console.log(`Found potential parent issue #${parentIssueNumber}`);
                  await checkIfAllChildrenClosed(parentIssueNumber);
                }
              }
            }
            
            // すべての親Issueをチェックする関数（手動実行用）
            async function checkAllParentIssues() {
              // オープンしている全Issueを取得
              const { data: openIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              
              for (const issue of openIssues) {
                // Issueの本文に子Issueへの参照があるかチェック
                const bodyText = issue.body || '';
                if (bodyText.match(/(?:child of|children:|sub-task:|sub task:)/i)) {
                  console.log(`Checking parent issue #${issue.number}`);
                  await checkIfAllChildrenClosed(issue.number);
                }
              }
            }
            
            // 親Issueのすべての子Issueがクローズされているかチェックする関数
            async function checkIfAllChildrenClosed(parentIssueNumber) {
              // 親Issueの情報を取得
              const parentIssue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentIssueNumber
              });
              
              if (parentIssue.data.state === 'closed') {
                console.log(`Parent issue #${parentIssueNumber} is already closed.`);
                return;
              }
              
              // 親Issueの本文から子Issueへの参照を検索
              const bodyText = parentIssue.data.body || '';
              const childMatches = bodyText.match(/(?:child|sub-task|subtask|todo).*?#(\d+)/gi);
              
              if (!childMatches || childMatches.length === 0) {
                console.log(`No child issues found for #${parentIssueNumber}`);
                return;
              }
              
              // 各子Issueのステータスをチェック
              let allClosed = true;
              for (const match of childMatches) {
                const childIssueNumber = parseInt(match.match(/#(\d+)/)[1]);
                
                // 子Issueの情報を取得
                const childIssue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: childIssueNumber
                });
                
                if (childIssue.data.state === 'open') {
                  console.log(`Child issue #${childIssueNumber} is still open.`);
                  allClosed = false;
                  break;
                } else {
                  console.log(`Child issue #${childIssueNumber} is closed.`);
                }
              }
              
              // すべての子Issueがクローズされていれば親Issueもクローズ
              if (allClosed) {
                console.log(`All child issues for #${parentIssueNumber} are closed. Closing parent issue.`);
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parentIssueNumber,
                  state: 'closed'
                });
                
                // 親Issueにコメントを追加
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parentIssueNumber,
                  body: '🎉 すべての子Issueが完了したため、このIssueを自動的にクローズしました。'
                });
              } else {
                console.log(`Not all child issues for #${parentIssueNumber} are closed yet.`);
              }
            }
